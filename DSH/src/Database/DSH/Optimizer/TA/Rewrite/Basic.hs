{-# LANGUAGE TemplateHaskell #-}

module Database.DSH.Optimizer.TA.Rewrite.Basic where
       
import Debug.Trace
       
import Control.Applicative
import Control.Monad
import Data.Maybe
import qualified Data.Set.Monad as S

import Database.Algebra.Dag.Common
import Database.Algebra.Pathfinder.Data.Algebra

import Database.DSH.Impossible
import Database.DSH.Optimizer.Common.Rewrite
import Database.DSH.Optimizer.TA.Rewrite.Common
import Database.DSH.Optimizer.TA.Properties.Types

cleanup :: TARewrite Bool
cleanup = iteratively $ sequenceRewrites [ applyToAll noProps cleanupRules 
                                         , applyToAll inferAll cleanupRulesTopDown 
                                         ]

cleanupRules :: TARuleSet ()
cleanupRules = [ stackedProject ]

cleanupRulesTopDown :: TARuleSet AllProps
cleanupRulesTopDown = [ unreferencedRownum ]

mergeProjections :: [Proj] -> [Proj] -> [Proj]
mergeProjections proj1 proj2 = map (\(c, e) -> (c, inline e)) proj1

  where
    inline :: Expr -> Expr
    inline (BinAppE op e1 e2) = BinAppE op (inline e1) (inline e2)
    inline (UnAppE op e)      = UnAppE op (inline e)
    inline (ColE c)           = fromMaybe $impossible (lookup c proj2)
    inline (ConstE val)       = ConstE val

stackedProject :: TARule ()
stackedProject q =
  $(pattern 'q "Project ps1 (Project ps2 (qi))"
    [| do
         return $ do
           let ps = mergeProjections $(v "ps1") $(v "ps2")
           logRewrite "Basic.Project.Merge" q
           void $ replaceWithNew q $ UnOp (Project ps) $(v "qi") |])
           
unreferencedRownum :: TARule AllProps
unreferencedRownum q = 
  $(pattern 'q "RowNum args (q1)"
    [| do
         (res, _, _) <- return $(v "args")
         neededCols  <- pICols <$> td <$> properties q
         trace (show neededCols) $ return ()
         predicate $ not (res `S.member` neededCols)
         
         return $ do
           logRewrite "Basic.Rownum.Unreferenced" q
           replace q $(v "q1") |])

-- | Eliminate rownums which re-generate positions based on one
-- sorting column. These rownums typically occur after filtering
-- operators, i.e. select, antijoin, semijoin. If the absolute values
-- generated by the rownum are not required and only the encoded order
-- is relevant, we can safely remove the rownum and use the sorting
-- column. In that case, positions might not be dense anymore.
postFilterRownum :: TARule AllProps
postFilterRownum q =
  $(pattern 'q "RowNum args (q1)"
    [| do
        (res, [(sortCol, _)], _) <- return $(v "args")
        useCols <- pUse <$> td <$> properties q
        keys    <- pKeys <$> bu <$> properties q
        cols    <- S.toList <$> pCols <$> bu <$> properties q

        -- To get rid of the rownum, the absolute values generated by
        -- it must not be required.
        predicate $ not $ res `S.member` useCols

        -- Rownum produces a key. If we remove the rownum because its
        -- absolute values are not needed and replace it with the
        -- original sorting column, it should still be a key.
        
        predicate $ (S.singleton sortCol) `S.member` keys

        return $ do
          logRewrite "Basic.Rownum.Unused" q
          let projs = (res, ColE sortCol) : map (\c -> (c, ColE c)) cols
          void $ replaceWithNew q $ UnOp (Project projs) $(v "q1") |])
       
 
