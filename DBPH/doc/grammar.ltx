\chapter{Grammar}

Type language:

\begin{syntaxdefs}
    \syntaxdef{|t|}
        \alt{|Int|}
        \alt{|Bool|}
        \alt{|[t]|}
        \alt{|(t1, ..., tn)|}
        \alt{|t1 -> t2|}
        \alt{|a|}
\end{syntaxdefs}

Non flat language:

\begin{syntaxdefs}
    \syntaxdef{|e|}
        \alt{|e1 e2|}\\
        \alt{|(\x -> e)|}\\
        \alt{|let x = e1 in e2|}\\
        \alt{|if e1 then e2 else e3|}\\
        \alt{|e1 op e2|} \\
        \alt{|c|}\\
        \alt{|x|}\\
        \alt{|map e1 e2 |}\\
\end{syntaxdefs}

All regular scalar functions are supported (e.g. | + |, | - |, | && |, etc). Furthermore the
following functions are supported:
\begin{itemize}
    \item |e.i| projection on tuples
    \item |e1[e2]| element lookup on lists, e2 should evaluate to an int
    \item |length|
%    \item |range e1 e2| results in a list |[e1 ... e2]|
    \item |restrict| takes two vectors and filters from the first all the element at a false position in the second
    \item |combine|
    \item |dist| works on vectors!
    \item |bPermute| 
\end{itemize}