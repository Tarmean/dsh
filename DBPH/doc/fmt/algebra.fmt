% This format file specifies macros typeset the ruleset
% of the algebraic compilation 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Tables
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%format desc_littbl = "\desctbl"
%format pos_littbl  = "\postbl"
%format item_littbl  = "\itemtbl"
%format gen_littbl  = "\gentbl"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Algebraic operators
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%format generic_binop = " \varoast "

% join operators 
%format (equijoin (c1) (c2) (op1) (op2)) = op1 " \Join_{ " c1 " = " c2"} " op2 
%format (thetajoin (pred) (op1) (op2))   = op1 "\Join_{" pred "} " op2 
%format (cross (op1) (op2))              = op1 " \times " op2 

% row-based operators 
%format (project (ps) (op))          = " \pi_{ " ps " }\left( " op " \right) "
%format (attach (c) (l) (op))        = " @_{ " c " : " l " }\left( " op " \right) "
%format (binop (res) (i1) (i2) (op)) = generic_binop" _{ " res " : " i1 " , " i2 " }\left( " op " \right) "
%format (select (pred) (op))         = "\sigma_{" pred  "}\left(" op "\right)"

% numering operators
%format (rownum (res) (srt) (op))  = "\#_{" res ": \left\langle " srt "\right\rangle}\left(" op "\right)"
%format (rowrank (res) (srt) (op)) = "\rank_{" res ": \left\langle " srt "\right\rangle}\left(" op "\right)"
%format (rowid (res) (op))         = "\#^{id}_{" res "}\left(" op "\right)"

% set operators
%format (union (a) (b))      = a " \cup " b 
%format (difference (a) (b)) = a " - " b

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Nested Algebra operators
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%format (nest (f) (t) (e)) = " \nu_{ " f " \rightarrow " t " }\left(" e "\right)" 
%format (unnest (f) (e)) = " \mu_{ " f " }\left(" e "\right)" 


%format (n_equijoin (c1) (c2) (op1) (op2)) = " \Join_{ " c1 " = " c2"} \left(" op1 " , " op2 " \right) " 
%format (n_cross (op1) (op2))              = " \times\left( " op1 " , " op2 "\right)"
%format (n_union (a) (b))      = " \cup\left( " a ", " b "\right)" 
%format (extunion (a) (b))      = " \stackrel{e}{\cup} \left( " a ", " b " \right) " 

%format (path (p) (r) (op)) = "\mathcal{P}_{ " p " }\left( " r ", " op " \right)"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Variables 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%format a1 = " a_1 "
%format an = " a_n "
%format ai = " a_i "
%format b1 = " b_1 "
%format bn = " b_n "
%format bi = " b_i "
%format c1 = " c_1 "
%format cm = " c_m "
%format ci = " c_i "
%format p1 = " p_1 "
%format pm = " p_m "
%format pi = " p_i "
%format P1 = " P_1 "
%format Pm = " P_m "
%format Pi = " P_i "
%format tr = " \tau_r "
%format to = " \tau_o "

%format a       = " \alpha "
%format a_n     = " \alpha^n "
%format a_0     = " \alpha^0 "
%format a_1     = " \alpha^1 "
%format v_a     = " v^{\alpha} "
%format d_a     = " d^{\alpha} "
%format d_a_1   = " d^{\alpha}_1 "
%format d_a_n   = " d^{\alpha}_n "
%format d_a_n_1 = " d^{\alpha}_{n+1} "
%format d_a_n_i = " d^{\alpha}_{n-i} "
%format d_a_i   = " d^{\alpha}_{i} "
%format d_a_i_1 = " d^{\alpha}_{i+1} "

%format b       = " \beta "
%format b_m     = " \beta^m "
%format b_0     = " \beta^0 "
%format b_1     = " \beta^1 "
%format b_2     = " \beta^2 "
%format b_n_1   = " \beta^{n+1} "
%format b_n     = " \beta^n "
%format v_b     = " v^{\beta} "
%format d_b     = " d^{\beta} "
%format d_b_1   = " d^{\beta}_1 "
%format d_b_2   = " d^{\beta}_2 "
%format d_b_m   = " d^{\beta}_m "
%format d_b_m_1 = " d^{\beta}_{m-1} "
%format d_b_m_i = " d^{\beta}_{m-i+1} "
%format d_b_n   = " d^{\beta}_{n} "
%format d_b_n_1 = " d^{\beta}_{n+1} "
%format d_b_i   = " d^{\beta}_{i} "
%format d_b_i_1 = " d^{\beta}_{i+1} "

%format g            = " \gamma "
%format v_g          = " v^{\gamma} "
%format d_g          = " d^{\gamma} "
%format d_g_1        = " d^{\gamma}_1 "
%format d_g_2        = " d^{\gamma}_2 "
%format d_g_n        = " d^{\gamma}_n "
%format d_g_n_1      = " d^{\gamma}_{n-1} "
%format d_g_i        = " d^{\gamma}_{i} "
%format d_g_i_1      = " d^{\gamma}_{i+1} "
%format d_g_n_plus_1 = " d^{\gamma}_{n+1} "

%format v_e     = " v_{\eta} "
%format d_e_1   = " d_{\eta}^1 "
%format d_e_2   = " d_{\eta}^2 "
%format d_e_i   = " d_{\eta}^i "
%format d_e_i_1 = " d_{\eta}^{i+1} "
%format d_e_n   = " d_{\eta}^n "

%format d_false_n = " d^{ " /= "}_n "
%format d_true_n  = " d^{ " == "}_n "
%format d_u_i     = " d^{\cup}_i "

%format e_1 = "e_1"
%format e_i = "e_i"
%format e_n = "e_n"

%format s_1 = "s_1"
%format s_n = "s_n"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Source language primitive
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%format uparrow = " \shortuparrow "
%format sgeneric_binop = " \ast " 
%format sgeneric_binop_lift = " \ast^{ " uparrow " } "

%format (plus_lift a b)            = a " +^{ " uparrow " } " b
%format (plus_lift_n n a b)        = a " +^{ " uparrow " " n " } " b
%format (promote (a) (b))          = "\textrm{promote}\left(" a "," b "\right)"
%format (dist (a) (b))             = "\textrm{dist}\left(" a "," b "\right)"
%format (length a)                 = "\textrm{length}\left(" a "\right)"
%format (dist_lift (a) (b))        = "\textrm{dist}^{ " uparrow " } \left(" a "," b "\right)"
%format (extract (a) (i))          = " \textrm{extract}\left( " a " , " i " \right) " 
%format (insert (a) (b) (i))       = " \textrm{insert}\left( " a" , " b " , " i " \right) "
%format (restrict (a) (b))         = " \textrm{restrict}\left( " a" , " b "\right) "
%format (restrict_lift (a) (b))    = " \textrm{restrict}^{" uparrow "}\left( " a" , " b "\right) "
%format (combine (g) (a) (b))      = " \textrm{combine}\left( " g ", " a" , " b "\right) "
%format (combine_lift (g) (a) (b)) = " \textrm{combine}^{" uparrow "}\left( " g ", " a" , " b "\right) "
%format (access_tuple (e) (i))     = e " \shortdownarrow " i
%format (cons (x) (xs))            = x ":" xs 
%format (cons_lift (x) (xs))       = x ":^{" uparrow "}" xs
%format (back_permute (a) (b))         = " \textrm{back\_permute}\left( " a " , " b " \right) "
%format (back_permute_lift (a) (b))         = " \textrm{back\_permute}^{" uparrow "}\left( " a " , " b " \right) "

%format (tuple (x)) = " \llparenthesis " x " \rrparenthesis"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%format one = "\One"
%format compiles_to = " \leadsto "

% containers for descriptor- and value-vectors
%format (vectors (v) (ds)) = " \left\langle " v " \left| " ds " \right.\right\rangle "
%format (vector (v))       = " \left\langle " v " \right\rangle "
%format (val_desc (v) (d)) = " \left. " v " \left| " d " \right.\right. "

%format dont_care = "\circ"

%format d_1 = " d_1 "
%format d_2 = " d_2 "
%format d_3 = " d_3 "
%format d_n = " d_n "

%format d_map_a_1   = "slice^{\alpha}_1"
%format d_map_a_i   = "slice^{\alpha}_i"
%format d_map_a_n   = "slice^{\alpha}_n"
%format d_map_a_i_1 = "slice^{\alpha}_{i+1}"
%format d_map_b_1   = "slice^{\beta}_1"
%format d_map_b_i   = "slice^{\beta}_i"
%format d_map_b_n   = "slice^{\beta}_n"
%format d_map_b_i_1 = "slice^{\beta}_{i+1}"
%format d_empty_a_i = "d^{\alpha,\varnothing}_i"
%format d_empty_b_i = "d^{\beta,\varnothing}_i"
%format d_empty_a_1 = "d^{\alpha,\varnothing}_1"
%format d_empty_b_1 = "d^{\beta,\varnothing}_1"
%format d_full_a_i  = "d^{\alpha,\bullet}_i"
%format d_full_a_1  = "d^{\alpha,\bullet}_1"
%format d_full_b_i  = "d^{\beta,\bullet}_i"
%format d_full_b_1  = "d^{\beta,\bullet}_1"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Misc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%format elem = " \in "
%format ...  = " \ldots "
%format and  = " \wedge "
%format or   = " \vee "
%format (set (op)) = " \left\{ " op " \right\} "
%format syntaxempty = "\llbracket\rrbracket"

% brackets
%format (sqbr (x))  = " \left[ " x " \right] "
%format (paren (x)) = " \left( " x " \right) "

%format (list_compr (body) (decl)) = "\left\llbracket " body "\talloblong " decl "\right\rrbracket"
%format (set_compr (body) (decl)) = " \left\{ " body " \left| " decl " \right.\right\} "
%format has_type = "::"

%format Env = "\Gamma"
%format follows = "\vdash"
%format mapsto = "\mapsto"
%format (env_union (a) (b))      = a " \cup " b 
%format (NAC (e)) = " \mathcal{C}\left( " e " \right)"
%format L = " \mathcal{L} "
%format L' = " \mathcal{L}\sp{\prime} "
%format (bigand (decl)) = " \bigwedge_{"decl"} "
%format (wrap (e)) = "\textrm{wrap}\left(" e "\right)"
%format (list_n) = " \left[\right]^n "
%format empty = " \varnothing"