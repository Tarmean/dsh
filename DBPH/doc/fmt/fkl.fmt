%format (transform (x)) = " \mathcal{T} \llbracket " x " \rrbracket "
%format (lift (n) (e)) = " \mathcal{L} \llbracket " e " \rrbracket " n
%format pure = " "
%format $ = " "
%format <$> = " "
%format <*> = " "
%format (cloAppM (x) (y)) = " " x "~:\$~" y
%format (cloLAppM (x) (y)) = " " x "~:\$^{\uparrow}~" y
%format `cloLApp` = " ~:\$^{\uparrow}~ "
%format N.Expr = " NKL "
%format (TransM (x)) = x
%format F.Expr = " FKL "
%format o = " \oplus "
%format (ifPrimM (x) (y) (z)) = " \textbf{if}~" x "~\textbf{then}~" y "~\textbf{else}~" z
%format (opPrimM (t) (o) (x) (y)) = x o y
%format (opPrimLM (t) (o) (x) (y)) = x o"^{\uparrow}" y
%format _en = " e_{n} "
%format fvs = " \{y_1, \hdots, y_k \} "
%format (N.freeVars (e)) = " fvs~" e
%format (cloM (t) (n) (fv) (arg) (e1) (e2)) = " \ll " fv ", \lambda " arg " \rightarrow " e1  " , \lambda" n "~" arg " \rightarrow " e2 "\gg "
%format (cloLM (t) (n) (fv) (arg) (e1) (e2)) = " \ll " fv ", \lambda " arg " \rightarrow " e1  " , \lambda" n "~" arg " \rightarrow " e2 "\gg^{\uparrow} "

%format getFreshVar = "\textrm{let $n$ be fresh}"
%format prim1Transform = " "
%format prim2Transform = " "
%format distPrim = " dist "
%format restrictPrim = " restrict "
%format combinePrim = " combine "
%format notLPrim = " not^{\uparrow} "